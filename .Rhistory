x<- runif(5)
x
x<- rnorm(5,2)
x
sum(x)
mean(x)
?gl
swirl()
swirl
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
swirl()
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags@animate, flags$landmass, mean)
ok()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list = ls)
rm(list <- ls)
list(rm = ls)
rm(list = ls())
library(datasets)
data("iris")
data(iris)
head(iris)
lapply(iris$Sepal.Length,mean[c("virginica"),])
lapply(iris$Sepal.Length,mean)
sapply(iris$Sepal.Length,mean)
sapply(iris$Sepal.Length,iris$Species ,mean)
sapply(iris$Sepal.Length,iris$virginica ,mean)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
iris_dt <- as.data.table(iris)
install.packages(data.table)
install.packages("data.table")
iris_dt <- as.data.table(iris)
library(data.table)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
data("mtcars")
?mtcars
head(mtcars)
mtcars_dt <- as.data.table(mtcars)
mtcars_dt <- mtcars_dt[,  .(mean_cols = mean(hp)), by = cyl]
round(abs(mtcars_dt[cyl == 4, mean_cols] - mtcars_dt[cyl == 8, mean_cols]))
debug(ls)
rm<- (lis = ls())
rm= (lis = ls())
rm(lis = ls())
rm(list = ls())
library(datasets)
data(iris)
dim(iris)
head(iris)
lapply(iris,iris$Sepal.Length, mean)
lapply(iris$Sepal.Length, mean)
lapply(iris,iris[,1], mean)
rm=(list,ls())
rm(list,ls())
rm<-(list,ls())
rm(list = ls())
getwd()
setwd("D:/Rprogramming/week03")
getwd()
library(datasets)
data(iris)
rm (list = ls())
data(iris)
head(iris)
tapply(iris,iris$Sepal.Length,mean)
swirl()
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapp
sapply(flags,class)
sapply(flags,class,character(1))
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
stop
stop()
?swirl
bye
bye()
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,round(mean)
)
?round
tapply(iris$Sepal.Length,iris$Species,round(mean,1))
round(tapply(iris$Sepal.Length,iris$Species,mean),1)
round(tapply(iris$Sepal.Length,iris$Species,mean),0)
apply(iris[,1:4],mean)
apply(iris[,1:4],2,mean)
data("mtcars")
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
?abs
tapply(hp,cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
avghp <- tapply(mtcars$hp,mtcars$cyl,mean)
abs(avghp["4"]-avghp["8"])
round(abs(avghp["4"]-avghp["8"]),0)
debug(ls)
ls
ls()
?abs
Q
Q
Q
Q
heads
undebug(ls)
Q
Q
Q
Q
Q
undebug(ls)
head(mtcars)
?solve
rm (list = ls())
file.edit('/ProgrammingAssignment2/cachematrix.R')
getwd()
file.edit('/ProgrammingAssignment2/cachematrix.R')
?file.edit
currdir = getwd()
setwd(paste(currdir,"/ProgrammingAssignment2",sep=""))
getwd()
file.edit('cachematrix.R')
# makeCacheMatrix takes a Matrix and creates its Inverse Matrix using Solve()
# it also defines 4 functions to let the user get,set Matrix and get,set a matrix's
# inverse
makeCacheMatrix <- function(x = matrix()) {
invMatrix <- NULL
set <- function(y){
x <<- y
invMatrix <<- NULL
}
get <- function() x
setInv <- function(solve) invMatrix<<- solve
getInv <- function() invMatrix
list(set=set,get=get,setInv=setInv,getInv = getInv)
}
## cacheSolve is a function that caches the inverse of a matrix
## it starts by testing whether the inverse matrix is calculated so that it caches
## it, otherwise it calculates the inverse and return it
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInv()
if(!is.null(invMatrix)){
return(invMatrix)
}
data <- x$get()
invMatrix <- solve(data,...)
x$setInv(invMatrix)
invMatrix
}
x <- matrix(rexp(50,rate = 0.1), ncol=10)
x
cacheSolve(x)
s<-cacheSolve(x)
?getInv
class(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
makeVector(x)
cachemean(x)
is.recursive(x)
is.atomic(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x["getmean()"]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean(x,rm.na = true)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x["getmean()"]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["get()"]
m <- mean(data, ...)
x["setmean(m)"]
m
}
View(cacheSolve)
cachemean(x)
mean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- getmean(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get(x)
m <- mean(data, ...)
setmean(x)
m
}
cachemean(x)
cachemean <- function(x, ...) {
m <- getmean()x
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get(x)
m <- mean(data, ...)
setmean(x)
m
}
cachemean <- function(x, ...) {
m <- getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get(x)
m <- mean(data, ...)
setmean(x)
m
}
cachemean(x)
head(x)
cahceSolve(x)
cacheSolve(x)
mymatrix <- makeCacheMatrix(x)
cacheSolve(mymatrix)
ok()
x <- matrix(rexp(25,rate = 0.1), ncol=10)
x <- matrix(rexp(25,rate = 0.1), ncol=5)
x
mymatrix <- makeCacheMatrix(x)
mymatrix
cacheSolve(mymatrix)
mymatrix
cacheSolve(mymatrix)
cacheSolve(mymatrix)x
x
